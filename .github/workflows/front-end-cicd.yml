name: Upload Website to S3

on:
  push:
    branches:
      - test-workflow
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository
      - uses: actions/checkout@v3

      # 2. Set environment variables based on branch
      - name: Set environment variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "AWS_S3_BUCKET=cloud-resume-aleksander" >> $GITHUB_ENV
            echo "CLOUDFRONT_ID=E3CZT89CDZXZIN" >> $GITHUB_ENV
            echo "Deploying to PRODUCTION environment"
          else
            echo "AWS_S3_BUCKET=test-cloud-resume-aleksander" >> $GITHUB_ENV
            echo "CLOUDFRONT_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_ENV
            echo "Deploying to TEST environment"
          fi
          echo "AWS_REGION=eu-north-1" >> $GITHUB_ENV
          echo "SOURCE_DIR=website" >> $GITHUB_ENV

      # 3. Debugging: Check environment variables and files
      - run: echo "AWS_S3_BUCKET=${{ env.AWS_S3_BUCKET }}"
      - run: echo "SOURCE_DIR=${{ env.SOURCE_DIR }}"
      - run: echo "CLOUDFRONT_ID=${{ env.CLOUDFRONT_ID }}"
      - run: ls ${{ env.SOURCE_DIR }}

      # 4. Sync files to S3
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          SOURCE_DIR: ${{ env.SOURCE_DIR }}
      
      # 5. Configure AWS credentials for CloudFront invalidation
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. Invalidate CloudFront distribution
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_ID }} --paths "/*"

